# -*- coding: utf-8 -*-
"""FaceEmbeddings.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Q9YKvppBBReLsaPjW-eGGH-IH4bqrLs
"""

!pip install insightface
!pip install onnxruntime-gpu

import cv2
import numpy as np
# the following works around a deprecation in numpy
np.int = int
import insightface
from insightface.app import FaceAnalysis
import matplotlib.pyplot as plt

# Loop through 1000 images
for i in range(0, 999, 100):
    # Create the image filename based on the index
    filename = f'/content/drive/MyDrive/research24/image_step_{i}.png'

    # Read the image
    img = cv2.imread(filename)

    # Check if the image was successfully loaded
    if img is not None:
        # Exchange red and blue channels
        img = img[:, :, ::-1]

        # Display the image
        plt.imshow(img)
        plt.title(f'Image {i}')
        plt.show()
    else:
        print(f"Image {filename} not found.")

from google.colab import drive
drive.mount('/content/drive')

# set up network  (this only needs to be done once per session - network can be used again & again)
# (it will trigger a big download when run the first time)
app = FaceAnalysis(providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])
app.prepare(ctx_id=0, det_size=(640, 640))

# run detector on this face
# loop through 1000 images
for i in range(1, 999, 50):
    # create the image filename based on the index
    filename = f'/content/drive/MyDrive/research24/image_step_{i}.png'

    # read the image
    img = cv2.imread(filename)

    # check if the image was successfully loaded
    if img is not None:
        # exchange red and blue channels
        img = img[:, :, ::-1]

        # display the image
        plt.imshow(img)
        plt.title(f'Image {i}')
        plt.draw()
        plt.pause(1)
        # run the detector on it
        faces = app.get(img)
        img3 = app.draw_on(img,faces)
        # display the detected faces
        plt.imshow(img3)
        plt.draw()
        plt.pause(1)
        plt.clf()
        # get the cropped faces from the detector & the embeddings
        crop_imgs = []
        embeddings = []
        for f in faces:
          bb = [int(x) for x in f['bbox']]
          crop = img[bb[1]:bb[3],bb[0]:bb[2]]
          crop_imgs.append(crop)
          embeddings.append(f['embedding'])
          plt.imshow(crop)
          print(f'Embedding: {f["embedding"]}')
    else:
        print(f"Image {filename} not found.")